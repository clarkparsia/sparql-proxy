<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2005 - 2012, Clark & Parsia, LLC. <http://www.clarkparsia.com>
  -->

<project name="sparql-proxy" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <description>
        Clark &amp; Parsia url2sparql Module 
    </description>

    <!-- Global Properties -->
    <property environment="env"/>
    <property name="src" location="src" />
    <property name="build" location="build" />
    <property name="dist" location="dist" />
    <property name="lib" value="lib"/>

    <property name="project.name" value="sparql-proxy" />
    <property name="project.version" value="0.1" />
	<property name="web" value="web"/>
    <property name="war" value="${dist}/${project.name}.war"/>
    <property name="jar.prefix" value="sparql-proxy" />

    <path id="project.class.path">
        <pathelement location="${lib}" />
        <pathelement location="${build}" />
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
            <exclude name="**/${jar.prefix}*.jar"/>
        </fileset>
    </path>

    <!-- ************** PROJECT CLEANING ************** -->

    <target name="clean" description="Clean up build files">
        <delete dir="${build}" />
        <delete dir="${dist}" />
    </target>

    <target name="clean-libs" unless="cleaned">
        <property name="cleaned" value="true"/>

        <delete dir="${lib}" />
    </target>

    <!-- ************** PROJECT INIT ************** -->

    <target name="init" depends="clean">
        <pathconvert targetos="unix" property="classpath" refid="project.class.path" />
        <echo>CLASSPATH=${classpath}</echo>
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
		<mkdir dir="${dist}"/>
    </target>

    <target name="compile" depends="init"
            description="Compile source files." >
        <javac source="1.5" target="1.5" srcdir="${src}" destdir="${build}" debug="yes" deprecation="yes">
            <classpath refid="project.class.path"/>
        </javac>
    </target>

    <target name="build" depends="compile"
            description="Compile sources and copy data files into build directory.">
        <copy todir="${build}">
            <fileset dir="${src}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <target name="distfiles">
       <!-- Copy in lib files -->
        <mkdir dir="${dist}/lib" />

        <copy todir="${dist}/lib">
            <fileset dir="${lib}">
                <include name="**/*.jar" />
                <exclude name="**/${jar.prefix}*.jar"/>
            </fileset>	
        </copy>

        <copy todir="${dist}/src">
            <fileset dir="${src}">
                <include name="**/*.java" />
            </fileset>
        </copy>

    </target>

    <target name="dist" depends="build,distfiles"
            description="Generate a distribution" >

        <echo>${Class-Path}</echo>
        <!-- Make Jar file. -->
        <jar jarfile="${dist}/lib/${jar.prefix}-${project.version}.jar"
             basedir="${build}">
            <manifest>
                <attribute name="Class-Path" value="${Class-Path}" />
            </manifest>
        </jar>
    </target>

    <target name="web-dist" depends="build,distfiles"
      description="Builds war file for web deployment.">
        <copy todir="./temp/WEB-INF/lib" flatten="true">
          <fileset dir="${lib}">
            <include name="**/*.jar"/>
            <exclude name="**/javaee*.jar"/>
          </fileset>
        </copy>

        <war destfile="${war}" webxml="${web}/web.xml">
            <classes dir="${build}"/>
            <lib dir="./temp/WEB-INF/lib">
              <include name="*.jar"/>
            </lib>
          </war>
          <delete dir="./temp"/>
    </target>
	
	<target name="web-deploy" depends="web-dist">
		<delete file="${web.container}/${project.name}.war"/>
		<delete dir="${web.container}/${project.name}"/>
		<copy tofile="${web.container}/${project.name}.war" file="${war}"/>
	</target>	

</project>
